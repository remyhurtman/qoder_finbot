from http.server import BaseHTTPRequestHandler
import json
import os
import requests
import traceback

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN', "8129552663:AAGgaGHk0rOJ2R6aJ1rEdgvsiZxMBP6--cs")

class handler(BaseHTTPRequestHandler):
    def do_POST(self):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_length = int(self.headers['Content-Length'])
            # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
            post_data = self.rfile.read(content_length)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
            update_dict = json.loads(post_data.decode('utf-8'))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            if 'message' in update_dict and 'text' in update_dict['message']:
                chat_id = update_dict['message']['chat']['id']
                text = update_dict['message']['text']
                
                # –ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Telegram API
                if text == '/start':
                    response_text = """üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!
                    
üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç.

üí∏ –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "500 –∫–æ—Ñ–µ"
üìä –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å—É–º–º—É: "500" –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

üìà /stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤

üéâ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Vercel!
‚ú® –ü–æ–ª–Ω–∞—è 4-—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
                    send_message_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                    payload = {
                        "chat_id": chat_id,
                        "text": response_text
                    }
                    requests.post(send_message_url, json=payload)
                    
                elif text.isdigit():
                    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ
                    amount = float(text)
                    response_text = f"üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\n\nüîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
                    send_message_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                    payload = {
                        "chat_id": chat_id,
                        "text": response_text
                    }
                    requests.post(send_message_url, json=payload)
                
                else:
                    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ "—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ"
                    parts = text.split()
                    if len(parts) >= 2 and parts[0].replace('.', '', 1).isdigit():
                        amount = float(parts[0])
                        description = ' '.join(parts[1:])
                        
                        response_text = f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ü—Ä–æ—á–µ–µ"
                    else:
                        response_text = "‚ùì –ù–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '500 –∫–æ—Ñ–µ' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '500'"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
                    send_message_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                    payload = {
                        "chat_id": chat_id,
                        "text": response_text
                    }
                    requests.post(send_message_url, json=payload)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'status': 'success'}).encode())
            
        except Exception as e:
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            error_details = traceback.format_exc()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
            self.send_response(500)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({
                'status': 'error',
                'message': str(e),
                'details': error_details
            }).encode())
    
    def do_GET(self):
        # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        response_data = {
            'status': 'active',
            'message': 'Simplified Telegram webhook is running',
            'timestamp': 'now',
            'bot_token_status': 'Available' if BOT_TOKEN else 'Missing',
            'version': 'v1.2 (ultra-simple)'
        }
        
        self.wfile.write(json.dumps(response_data).encode())