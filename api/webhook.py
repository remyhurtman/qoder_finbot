from http.server import BaseHTTPRequestHandler
import json
import os
import asyncio
import logging
import sqlite3
import traceback
from datetime import datetime
import re
from decimal import Decimal
from typing import Dict, Optional, Tuple, List, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
telegram_app = None
db_connection = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
CATEGORIES = [
    ["üçî –ï–¥–∞", "üç∫ –ë–∞—Ä—ã", "‚òï –ö–æ—Ñ–µ", "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω—ã"],
    ["üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üè† –ñ–∏–ª—å–µ", "üì∫ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "üíä –ó–¥–æ—Ä–æ–≤—å–µ"],
    ["üí≥ –ü–æ–¥–ø–∏—Å–∫–∏", "üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "üëï –û–¥–µ–∂–¥–∞", "üê∂ –ü–∏—Ç–æ–º—Ü—ã"],
    ["üíª –¢–µ—Ö–Ω–∏–∫–∞", "üì° –°–≤—è–∑—å", "üíÅ –£—Å–ª—É–≥–∏", "üîé –ü—Ä–æ—á–µ–µ"],
    ["üí∞ –î–æ—Ö–æ–¥", "üí∏ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "üéÅ –ü–æ–¥–∞—Ä–∫–∏", "üë† –ö—Ä–∞—Å–æ—Ç–∞"]
]

# === –ö–õ–ê–°–° –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ü–ê–†–°–ò–ù–ì–ê ===
class ParsedTransaction:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    def __init__(self, 
                 amount: Optional[float] = None,
                 description: Optional[str] = None,
                 category: Optional[str] = None,
                 level: int = 0,
                 confidence: float = 0.0):
        self.amount = amount
        self.description = description
        self.category = category
        self.level = level
        self.confidence = confidence

# === –°–ò–°–¢–ï–ú–ê –ü–ê–†–°–ò–ù–ì–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (4 –£–†–û–í–ù–Ø) ===
class TransactionPipeline:
    """
    4-—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    
    –£—Ä–æ–≤–Ω–∏:
    1. –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    2. –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ"
    3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    4. –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞
    """
    
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        self.category_keywords = {
            "üçî –ï–¥–∞": ["–µ–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç—ã", "–º–∞–≥–∞–∑–∏–Ω", "—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç", "–∞—à–∞–Ω", "–ø—è—Ç–µ—Ä–æ—á–∫–∞", "–º–∞–≥–Ω–∏—Ç", "–ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫"],
            "üç∫ –ë–∞—Ä—ã": ["–±–∞—Ä", "–ø–∞–±", "–ø–∏–≤–æ", "–∞–ª–∫–æ–≥–æ–ª—å", "–≤–∏–Ω–æ", "–≤–∏—Å–∫–∏", "–∫–æ–∫—Ç–µ–π–ª—å", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–∫–∞—Ñ–µ"],
            "‚òï –ö–æ—Ñ–µ": ["–∫–æ—Ñ–µ", "–∫–∞–ø—É—á–∏–Ω–æ", "–ª–∞—Ç—Ç–µ", "—ç—Å–ø—Ä–µ—Å—Å–æ", "—Å—Ç–∞—Ä–±–∞–∫—Å", "–∫–æ—Ñ–µ–π–Ω—è", "—á–∞–π"],
            "üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å", "–º–µ—Ç—Ä–æ", "–ø—Ä–æ–µ–∑–¥", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "—è–Ω–¥–µ–∫—Å —Ç–∞–∫—Å–∏", "—É–±–µ—Ä", "–∫–∞—Ä—à–µ—Ä–∏–Ω–≥", "–±–µ–Ω–∑–∏–Ω", "–∑–∞–ø—Ä–∞–≤–∫–∞"],
            "üè† –ñ–∏–ª—å–µ": ["–∞—Ä–µ–Ω–¥–∞", "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–∫–æ–º–º—É–Ω–∞–ª–∫–∞", "–∂–∫—Ö", "—Å—á–µ—Ç–∞", "–∏–ø–æ—Ç–µ–∫–∞", "–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞"],
            "üì∫ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "—Ç–µ–∞—Ç—Ä", "–∫–æ–Ω—Ü–µ—Ä—Ç", "—à–æ—É", "–º—É–∑–µ–π", "–≤—ã—Å—Ç–∞–≤–∫–∞", "–∏–≥—Ä—ã", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–≤–µ—á–µ—Ä–∏–Ω–∫–∞"],
            "üíä –ó–¥–æ—Ä–æ–≤—å–µ": ["–∞–ø—Ç–µ–∫–∞", "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞", "–≤—Ä–∞—á", "–±–æ–ª—å–Ω–∏—Ü–∞", "–º–µ–¥–∏—Ü–∏–Ω–∞", "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "–∞–Ω–∞–ª–∏–∑—ã"],
            "üí≥ –ü–æ–¥–ø–∏—Å–∫–∏": ["–ø–æ–¥–ø–∏—Å–∫–∞", "—Å–µ—Ä–≤–∏—Å", "–Ω–µ—Ç—Ñ–ª–∏–∫—Å", "spotify", "apple", "—è–Ω–¥–µ–∫—Å –ø–ª—é—Å", "subscription"],
            "üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": ["–æ–±—É—á–µ–Ω–∏–µ", "–∫—É—Ä—Å—ã", "—Ç—Ä–µ–Ω–∏–Ω–≥", "–∫–Ω–∏–≥–∏", "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "—É—á–µ–±–∞"],
            "üëï –û–¥–µ–∂–¥–∞": ["–æ–¥–µ–∂–¥–∞", "–æ–±—É–≤—å", "–∑–∞—Ä–∞", "h&m", "—Å–ø–æ—Ä—Ç–º–∞—Å—Ç–µ—Ä", "–≤–µ—â–∏", "—à–º–æ—Ç–∫–∏"],
            "üê∂ –ü–∏—Ç–æ–º—Ü—ã": ["–ø–∏—Ç–æ–º–µ—Ü", "—Å–æ–±–∞–∫–∞", "–∫–æ—à–∫–∞", "–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä", "–∫–æ—Ä–º", "–∑–æ–æ–º–∞–≥–∞–∑–∏–Ω"],
            "üíª –¢–µ—Ö–Ω–∏–∫–∞": ["—Ç–µ—Ö–Ω–∏–∫–∞", "–≥–∞–¥–∂–µ—Ç", "–Ω–æ—É—Ç–±—É–∫", "—Ç–µ–ª–µ—Ñ–æ–Ω", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–∫–æ–º–ø—å—é—Ç–µ—Ä", "–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"],
            "üì° –°–≤—è–∑—å": ["—Å–≤—è–∑—å", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–º–æ–±–∏–ª—å–Ω—ã–π", "—Å–æ—Ç–æ–≤—ã–π", "wifi", "—Ä–æ—É—Ç–µ—Ä"],
            "üíÅ –£—Å–ª—É–≥–∏": ["—É—Å–ª—É–≥–∏", "—Å—Ç—Ä–∏–∂–∫–∞", "–º–∞–Ω–∏–∫—é—Ä", "—Å–∞–ª–æ–Ω", "—Ö–∏–º—á–∏—Å—Ç–∫–∞", "—Ä–µ–º–æ–Ω—Ç", "–∫–ª–∏–Ω–∏–Ω–≥"],
            "üí∞ –î–æ—Ö–æ–¥": ["–∑–∞—Ä–ø–ª–∞—Ç–∞", "–¥–æ—Ö–æ–¥", "–ø–æ–ª—É—á–∏–ª", "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–ø–µ—Ä–µ–≤–æ–¥", "–≥–æ–Ω–æ—Ä–∞—Ä", "–∞–≤–∞–Ω—Å"],
            "üí∏ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": ["–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∞–∫—Ü–∏–∏", "–±–∏—Ä–∂–∞", "–≤–∞–ª—é—Ç–∞", "–∫—Ä–∏–ø—Ç–∞", "–≤–∫–ª–∞–¥", "–¥–µ–ø–æ–∑–∏—Ç"],
            "üéÅ –ü–æ–¥–∞—Ä–∫–∏": ["–ø–æ–¥–∞—Ä–æ–∫", "–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", "–ø—Ä–µ–∑–µ–Ω—Ç", "—Å—É–≤–µ–Ω–∏—Ä", "–ø–æ–¥–∞—Ä–∏–ª"],
            "üë† –ö—Ä–∞—Å–æ—Ç–∞": ["–∫—Ä–∞—Å–æ—Ç–∞", "–∫–æ—Å–º–µ—Ç–∏–∫–∞", "–º–∞–∫–∏—è–∂", "–ø–∞—Ä—Ñ—é–º", "—Å–ø–∞", "–º–∞—Å–∫–∞", "–∫—Ä–µ–º"],
            "üîé –ü—Ä–æ—á–µ–µ": ["–ø—Ä–æ—á–µ–µ", "—Ä–∞–∑–Ω–æ–µ", "–¥—Ä—É–≥–æ–µ", "misc", "other"]
        }
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–ª–µ–Ω–≥–∞ –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
        self.slang_dict = {
            "–ø—è—Ç–∏—Ö–∞—Ç–∫–∞": "500", "–ø—è—Ç–∏—Ö–∞—Ç–∫—É": "500",
            "–∫–æ—Å–∞—Ä—å": "1000", "–∫–æ—Å–∞—Ä—è": "1000", "–∫–æ—Å–∞—Ä–µ–π": "1000",
            "–ø–æ–ª—Ç–∏–Ω–Ω–∏–∫": "50", "–ø–æ–ª—Ç–∏–Ω–Ω–∏–∫–∞": "50",
            "—Å–æ—Ç–∫–∞": "100", "—Å–æ—Ç–∫—É": "100", "—Å–æ—Ç–Ω–∏": "100",
            "—á–µ—Ä–≤–æ–Ω–µ—Ü": "10", "—á–µ—Ä–≤–æ–Ω—Ü–∞": "10",
            "–ø—è—Ç–µ—Ä–∫–∞": "5", "–ø—è—Ç–µ—Ä–∫—É": "5",
            "–¥–µ—Å—è—Ç–∫–∞": "10", "–¥–µ—Å—è—Ç–∫—É": "10",
            "—Å—Ç–æ–ª—å–Ω–∏–∫": "100", "—Å—Ç–æ–ª—å–Ω–∏–∫–∞": "100",
            "–ø–æ–ª—Ç–æ—Å": "50", "–ø–æ–ª—Ç–æ—Å–∞": "50",
            "—Ç—ã—â–∞": "1000", "—Ç—ã—â—É": "1000", "—Ç—ã—Å—è—á–∞": "1000",
            "—à—Ç—É–∫–∞": "1000", "—à—Ç—É–∫—É": "1000",
            "–ø–æ–ª—Ç–æ—Ä–∞": "1.5", "–ø–æ–ª—Ç–æ—Ä—ã": "1.5"
        }
    
    def level1_numeric_parse(self, text: str) -> ParsedTransaction:
        """–£—Ä–æ–≤–µ–Ω—å 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å—Ç–æ —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        # –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        if text.replace('.', '', 1).isdigit():
            try:
                amount = float(text.replace(',', '.'))
                return ParsedTransaction(
                    amount=amount,
                    description=None,
                    category=None,
                    level=1,
                    confidence=1.0
                )
            except ValueError:
                pass
        return None
    
    def level2_amount_description_parse(self, text: str) -> ParsedTransaction:
        """–£—Ä–æ–≤–µ–Ω—å 2: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ '—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ'"""
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (–∑–∞–º–µ–Ω–∞ —Å–ª–µ–Ω–≥–∞)
        for slang, number in self.slang_dict.items():
            text = re.sub(rf'\b{slang}\b', number, text.lower())
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É–º–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è
        patterns = [
            # [–°—É–º–º–∞] [–û–ø–∏—Å–∞–Ω–∏–µ] - "500 –∫–æ—Ñ–µ"
            r'^(\d+(?:[.,]\d{1,2})?)\s+(.+)$',
            # [–û–ø–∏—Å–∞–Ω–∏–µ] [–°—É–º–º–∞] - "—Ç–∞–∫—Å–∏ 500"
            r'^(.+)\s+(\d+(?:[.,]\d{1,2})?)$',
            # [–°—É–º–º–∞] –Ω–∞ [–û–ø–∏—Å–∞–Ω–∏–µ] - "500 –Ω–∞ –∫–æ—Ñ–µ"
            r'^(\d+(?:[.,]\d{1,2})?)\s+–Ω–∞\s+(.+)$',
            # [–û–ø–∏—Å–∞–Ω–∏–µ] –∑–∞ [–°—É–º–º–∞] - "–∫–æ—Ñ–µ –∑–∞ 500"
            r'^(.+)\s+–∑–∞\s+(\d+(?:[.,]\d{1,2})?)$'
        ]
        
        for pattern in patterns:
            match = re.match(pattern, text)
            if match:
                groups = match.groups()
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Å—É–º–º–æ–π, –∞ —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ–º
                for group in groups:
                    if re.match(r'^\d+(?:[.,]\d{1,2})?$', group):
                        amount_str = group
                        description = next((g for g in groups if g != group), "")
                        try:
                            amount = float(amount_str.replace(',', '.'))
                            return ParsedTransaction(
                                amount=amount,
                                description=description.strip(),
                                category=None,  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ 3
                                level=2,
                                confidence=0.9
                            )
                        except ValueError:
                            continue
        
        return None
    
    def level3_category_determination(self, transaction: ParsedTransaction) -> ParsedTransaction:
        """–£—Ä–æ–≤–µ–Ω—å 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        if not transaction or not transaction.description:
            return transaction
        
        # –ö–æ–ø–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        result = ParsedTransaction(
            amount=transaction.amount,
            description=transaction.description,
            category=transaction.category,
            level=3,
            confidence=transaction.confidence
        )
        
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
        description_lower = transaction.description.lower()
        
        # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        best_match = None
        best_score = 0
        
        for category, keywords in self.category_keywords.items():
            for keyword in keywords:
                if keyword in description_lower:
                    score = len(keyword) / len(description_lower)  # –ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å
                    if score > best_score:
                        best_score = score
                        best_match = category
        
        if best_match:
            result.category = best_match
            result.confidence = min(0.7 + best_score, 0.95)  # –ü–æ–≤—ã—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –Ω–æ –Ω–µ –≤—ã—à–µ 0.95
        else:
            result.category = "üîé –ü—Ä–æ—á–µ–µ"  # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–ü—Ä–æ—á–µ–µ"
            result.confidence = 0.5  # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        
        return result
    
    def level4_ai_enhanced_parsing(self, transaction: ParsedTransaction) -> ParsedTransaction:
        """
        –£—Ä–æ–≤–µ–Ω—å 4: –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞
        –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        """
        # –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Ä–æ–≤–Ω—è 3
        if transaction:
            transaction.level = 4
        return transaction
    
    def process(self, text: str) -> ParsedTransaction:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤—Å–µ 4 —É—Ä–æ–≤–Ω—è"""
        # –£—Ä–æ–≤–µ–Ω—å 1: –ß–∏—Å–ª–æ–≤–æ–π –≤–≤–æ–¥
        result = self.level1_numeric_parse(text)
        
        # –£—Ä–æ–≤–µ–Ω—å 2: –ü–∞—Ä—Å–∏–Ω–≥ "—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ"
        if not result:
            result = self.level2_amount_description_parse(text)
        
        # –ï—Å–ª–∏ —É—Ä–æ–≤–Ω–∏ 1-2 –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        if not result:
            return None
        
        # –£—Ä–æ–≤–µ–Ω—å 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if result.description:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            result = self.level3_category_determination(result)
        
        # –£—Ä–æ–≤–µ–Ω—å 4: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–∑–∞–≥–ª—É—à–∫–∞)
        result = self.level4_ai_enhanced_parsing(result)
        
        return result

# === –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ===
def init_database():
    """SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
    global db_connection
    try:
        # –î–ª—è —Å–µ—Ä–≤–µ—Ä–ª–µ—Å—Å —Ñ—É–Ω–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º in-memory –ë–î
        db_connection = sqlite3.connect(':memory:')
        cursor = db_connection.cursor()
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            first_name TEXT,
            username TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            category TEXT NOT NULL,
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
        """)
        
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS temp_amounts (
            user_id INTEGER PRIMARY KEY, 
            amount REAL, 
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
        """)
        
        db_connection.commit()
        logger.info("SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def save_user(user_id, first_name, username=None):
    """C–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    try:
        if db_connection is None:
            init_database()
            
        cursor = db_connection.cursor()
        cursor.execute(
            "INSERT OR IGNORE INTO users (id, first_name, username) VALUES (?, ?, ?)",
            (user_id, first_name, username)
        )
        db_connection.commit()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def save_temp_amount(user_id, amount):
    """C–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        if db_connection is None:
            init_database()
            
        cursor = db_connection.cursor()
        cursor.execute(
            "INSERT OR REPLACE INTO temp_amounts (user_id, amount) VALUES (?, ?)",
            (user_id, amount)
        )
        db_connection.commit()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—É–º–º—ã: {e}")
        return False

def get_temp_amount(user_id):
    """P–µ—Ç—Ä–∏–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—É–º–º—ã"""
    try:
        if db_connection is None:
            init_database()
            
        cursor = db_connection.cursor()
        cursor.execute("SELECT amount FROM temp_amounts WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—É–º–º—ã: {e}")
        return None

def save_transaction(user_id, amount, category, description=None):
    """C–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î"""
    try:
        if db_connection is None:
            init_database()
            
        cursor = db_connection.cursor()
        cursor.execute(
            "INSERT INTO transactions (user_id, amount, category, description) VALUES (?, ?, ?, ?)",
            (user_id, amount, category, description)
        )
        db_connection.commit()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        return False

# === –§–£–ù–ö–¶–ò–ò TELEGRAM –ë–û–¢–ê ===
def get_bot_token():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('BOT_TOKEN')
    
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    if not token:
        logger.warning("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
        token = "8129552663:AAGgaGHk0rOJ2R6aJ1rEdgvsiZxMBP6--cs"
    
    return token

def get_categories_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    keyboard = []
    
    for row_idx, row in enumerate(CATEGORIES):
        inline_row = []
        for col_idx, category in enumerate(row):
            callback_data = f"category_{row_idx}_{col_idx}"
            inline_row.append(InlineKeyboardButton(category, callback_data=callback_data))
        keyboard.append(inline_row)
    
    return InlineKeyboardMarkup(keyboard)

async def init_telegram_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application"""
    global telegram_app
    
    try:
        if telegram_app is None:
            token = get_bot_token()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: {token[:5]}...")
            telegram_app = Application.builder().token(token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
            telegram_app.add_handler(CommandHandler("start", handle_start))
            telegram_app.add_handler(CommandHandler("stats", handle_stats))
            telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
            telegram_app.add_handler(CallbackQueryHandler(handle_callback))
            
            await telegram_app.initialize()
            logger.info("Telegram Application —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Application: {e}")
        logger.error(traceback.format_exc())
        raise e
        
    return telegram_app

async def handle_start(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        user_id = user.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        save_user(user_id, user.first_name, user.username)
        
        # –ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é. –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
        
        welcome_text = f"""üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞!

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üí∏ –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "500 –∫–æ—Ñ–µ"
üìä –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å—É–º–º—É: "500" –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

üìà /stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤

üéâ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Vercel!
‚ú® –ü–æ–ª–Ω–∞—è 4-—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        
        await update.message.reply_text(welcome_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start: {e}")
        logger.error(traceback.format_exc())
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            if update and update.message:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            pass

async def handle_stats(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        user = update.effective_user
        user_id = user.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î)
        stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤

üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0
üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: 0 ‚ÇΩ

üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:
1. –î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç

‚è≥ –í —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!"""
        
        await update.message.reply_text(stats_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_stats: {e}")

async def handle_message(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        message_text = update.message.text
        user = update.effective_user
        user_id = user.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message_text}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transaction_pipeline = TransactionPipeline()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4-—É—Ä–æ–≤–Ω–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        parsed = transaction_pipeline.process(message_text)
        
        if parsed:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—à–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            if parsed.level == 1 and not parsed.description:
                # –£—Ä–æ–≤–µ–Ω—å 1: –¢–æ–ª—å–∫–æ —Å—É–º–º–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                save_temp_amount(user_id, parsed.amount)
                response = f"üí∞ –°—É–º–º–∞: {parsed.amount} ‚ÇΩ\n\nüîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
                await update.message.reply_text(response, reply_markup=get_categories_keyboard())
            else:
                # –£—Ä–æ–≤–µ–Ω—å 2-4: –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
                if parsed.category:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
                    save_transaction(user_id, parsed.amount, parsed.category, parsed.description)
                    response = f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüí∞ –°—É–º–º–∞: {parsed.amount} ‚ÇΩ"
                    if parsed.description:
                        response += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {parsed.description}"
                    response += f"\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {parsed.category}"
                    response += f"\nüîÑ –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {parsed.level}"
                    await update.message.reply_text(response)
                else:
                    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)
                    save_temp_amount(user_id, parsed.amount)
                    response = f"üí∞ –°—É–º–º–∞: {parsed.amount} ‚ÇΩ\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {parsed.description}\n\nüîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
                    await update.message.reply_text(response, reply_markup=get_categories_keyboard())
        else:
            # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
            response = "‚ùì –ù–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '500 –∫–æ—Ñ–µ' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '500'."
            await update.message.reply_text(response)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        query = update.callback_query
        user_id = query.from_user.id
        callback_data = query.data
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {callback_data}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if callback_data.startswith('category_'):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            _, row_idx, col_idx = callback_data.split('_')
            row_idx, col_idx = int(row_idx), int(col_idx)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = CATEGORIES[row_idx][col_idx]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—É–º–º—É
            amount = get_temp_amount(user_id)
            
            if amount is not None:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                save_transaction(user_id, amount, category)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                response = f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
                await query.edit_message_text(text=response)
            else:
                await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# === HANDLER –î–õ–Ø VERCEL ===
class handler(BaseHTTPRequestHandler):
    def do_POST(self):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_length = int(self.headers['Content-Length'])
            # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
            post_data = self.rfile.read(content_length)
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å —Å –¥–ª–∏–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_length}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
            try:
                update_dict = json.loads(post_data.decode('utf-8'))
                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram: {json.dumps(update_dict)[:200]}...")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–∞–Ω–¥—ã /start
                if "message" in update_dict and "text" in update_dict["message"] and update_dict["message"]["text"] == "/start":
                    logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
                
                update = Update.de_json(update_dict, None)
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application")
                app_instance = loop.run_until_complete(init_telegram_app())
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram")
                loop.run_until_complete(app_instance.process_update(update))
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram: {e}")
                logger.error(traceback.format_exc())
                raise e
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'status': 'success'}).encode())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
            self.send_response(500)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({
                'status': 'error',
                'message': str(e)
            }).encode())
    
    def do_GET(self):
        # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        response_data = {
            'status': 'active',
            'message': 'Telegram webhook is running',
            'timestamp': datetime.now().isoformat(),
            'features': '4-level transaction parsing system',
            'version': '1.1',
            'last_update': '2025-08-31',
            'env_variables': {
                'BOT_TOKEN': 'Available' if os.getenv('BOT_TOKEN') else 'Missing',
            }
        }
        
        self.wfile.write(json.dumps(response_data).encode())