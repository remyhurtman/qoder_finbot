from http.server import BaseHTTPRequestHandler
import json
import os
import asyncio
import logging
from datetime import datetime

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
telegram_app = None

def get_bot_token():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    token = os.getenv('BOT_TOKEN')
    if not token:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    return token

async def init_telegram_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application"""
    global telegram_app
    
    if telegram_app is None:
        token = get_bot_token()
        telegram_app = Application.builder().token(token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        telegram_app.add_handler(CommandHandler("start", handle_start))
        telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        await telegram_app.initialize()
        
    return telegram_app

async def handle_start(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_text = f"""üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞!

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üí∏ –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "500 –∫–æ—Ñ–µ"
üìä –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å—É–º–º—É: "500"

üéâ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Vercel!"""
    
    await update.message.reply_text(welcome_text)

async def handle_message(update, context):
    """–ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_text = update.message.text
    user_id = update.effective_user.id
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å—Ö–æ–¥–æ–≤
    if message_text.isdigit():
        # –¢–æ–ª—å–∫–æ —Å—É–º–º–∞
        amount = float(message_text)
        response = f"üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\n\nüîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
    else:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å "—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ"
        parts = message_text.split()
        if len(parts) >= 2 and parts[0].replace('.', '', 1).isdigit():
            amount = float(parts[0])
            description = ' '.join(parts[1:])
            
            response = f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ü—Ä–æ—á–µ–µ"
        else:
            response = "‚ùì –ù–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '500 –∫–æ—Ñ–µ' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '500'"
    
    await update.message.reply_text(response)

class handler(BaseHTTPRequestHandler):
    def do_POST(self):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_length = int(self.headers['Content-Length'])
            # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
            post_data = self.rfile.read(content_length)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
            update_dict = json.loads(post_data.decode('utf-8'))
            update = Update.de_json(update_dict, None)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            app_instance = loop.run_until_complete(init_telegram_app())
            loop.run_until_complete(app_instance.process_update(update))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'status': 'success'}).encode())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
            self.send_response(500)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({
                'status': 'error',
                'message': str(e)
            }).encode())
    
    def do_GET(self):
        # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps({
            'status': 'active',
            'message': 'Telegram webhook is running',
            'timestamp': datetime.now().isoformat()
        }).encode())